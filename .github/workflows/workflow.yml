name: CI

on: [push, pull_request]

jobs:
  python-build:
    name: Python Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: Prepare
        id: prep
        run: |
          TAG=$(echo $GITHUB_SHA | head -c7)
          IMAGE="my.docker.registry/progapangist/anycable_demo"
          echo ::set-output name=tagged_image::${IMAGE}:${TAG}
          echo ::set-output name=tag::${TAG}
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          # Key is named differently to avoid collision
          key: ${{ runner.os }}-multi-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-multi-buildx
      - name: Build image
        uses: docker/build-push-action@v2
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile
          push: false
          tags: ${{ steps.prep.outputs.tagged_image }}
          cache-from: type=local,src=/tmp/.buildx-cache
          # Note the mode=max here
          # More: https://github.com/moby/buildkit#--export-cache-options
          # And: https://github.com/docker/buildx#--cache-tonametypetypekeyvalue
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  js-test:
    name: JS Lint & Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x]
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        run: |
          npm install

      - name: Lint
        run: |
          npm run lint

      - name: Build
        run: |
          npm run build

  deploy:
    name: Deploy
    needs: [python-build,js-test]
    runs-on: ubuntu-latest
    if: contains('
      refs/heads/master
      refs/heads/develop
      ', github.ref)
    steps:
      - uses: actions/checkout@v2
      - name: zip deploy script
        run: |
          mkdir deploy_script
          cp deploy.sh deploy_script
          tar -cvf deploy.tar deploy_script

      - name: Set env for develop branch
        if: endsWith(github.ref, '/develop')
        run: |
          echo "ENVIRONMENT=${{ secrets.DEV_ENV }}" >> $GITHUB_ENV
          echo "HOST=${{ secrets.DEV_HOST }}" >> $GITHUB_ENV
          echo "USERNAME=${{ secrets.USERNAME }}" >> $GITHUB_ENV
          echo "BRANCH=${{ secrets.DEV_BRANCH }}" >> $GITHUB_ENV
          echo "WWW_SITE_URL=dev.devinit.org" >> $GITHUB_ENV
          echo "SITE_URL=dev.devinit.org" >> $GITHUB_ENV
          echo "DATA_SITE_URL=dev.devinit.org" >> $GITHUB_ENV

      - name: Set env for master branch
        if: endsWith(github.ref, '/master')
        run: |
          echo "ENVIRONMENT=${{ secrets.PROD_ENV }}" >> $GITHUB_ENV
          echo "HOST=${{ secrets.PROD_HOST }}" >> $GITHUB_ENV
          echo "USERNAME=${{ secrets.USERNAME }}" >> $GITHUB_ENV
          echo "BRANCH=${{ secrets.PROD_BRANCH }}" >> $GITHUB_ENV
          echo "WWW_SITE_URL=www.devinit.org" >> $GITHUB_ENV
          echo "SITE_URL=devinit.org" >> $GITHUB_ENV
          echo "DATA_SITE_URL=data.devinit.org" >> $GITHUB_ENV

      - name: copy deploy file via ssh
        uses: appleboy/scp-action@master
        env:
          HOST: ${{ env.HOST }}
          USERNAME: ${{ env.USERNAME }}
          PORT: ${{ secrets.PORT }}
          KEY: ${{ secrets.KEY }}
        with:
          source: 'deploy_script'
          target: '.'

      - name: run deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.HOST }}
          username: ${{ env.USERNAME }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          script: |
            export BRANCH=${{ env.BRANCH }}
            export RABBITMQ_PASSWORD=${{ secrets.RABBITMQ_PASSWORD }}
            export ELASTIC_SEARCH_URL=${{ secrets.ELASTIC_SEARCH_URL }}
            export ELASTIC_PASSWORD=${{ secrets.ELASTIC_PASSWORD }}
            export SECRET_KEY="${{ secrets.SECRET_KEY }}"
            export ELASTIC_USERNAME=${{ secrets.ELASTIC_USERNAME }}
            export ENVIRONMENT=${{ env.ENVIRONMENT }}
            export CELERY_BROKER_URL=${{ secrets.CELERY_BROKER_URL }}
            export DATABASE_URL=${{ secrets.DATABASE_URL }}
            export DEFAULT_FROM_EMAIL=${{ secrets.DEFAULT_FROM_EMAIL }}
            export EMAIL_HOST=${{ secrets.EMAIL_HOST }}
            export EMAIL_BACKEND=${{ secrets.EMAIL_BACKEND }}
            export EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}
            export EMAIL_HOST_PASSWORD=${{secrets.EMAIL_HOST_PASSWORD }}
            export HS_API_KEY=${{ secrets.HS_API_KEY }}
            export HS_TICKET_PIPELINE=${{ secrets.HS_TICKET_PIPELINE }}
            export HS_TICKET_PIPELINE_STAGE=${{ secrets.HS_TICKET_PIPELINE_STAGE }}
            export GITHUB_TOKEN=${{ secrets.TOKEN_GITHUB }}
            export SITE_URL=${{ env.SITE_URL }}
            export WWW_SITE_URL=${{ env.WWW_SITE_URL }}
            export DATA_SITE_URL=${{ env.DATA_SITE_URL }}
            cp -r deploy_script/deploy.sh .
            chmod +x deploy.sh && ./deploy.sh run
