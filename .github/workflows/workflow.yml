name: Python CI

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Cache pip
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          ${{ runner.os }}-
    - name: Install dependencies
      run: pip install -r requirements.txt
    - name: Build the docker-compose stack
      run: |
        echo "DATABASE_URL=postgresql://di_website:${{ secrets.DB_PASSWORD }}@db/di_website" > .env
        docker volume create --name=diwebsite_db
        docker volume create --name="index_db"
        docker-compose up -d db
        docker-compose up --build -d web
        docker-compose run web /bin/sh -c "python3 -m coverage run manage.py test && python3 -m coverage xml && mv coverage.xml shared" && cd shared && python3 -m codecov

  deploy:
    needs: [build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/feature/setup-github-actions'
    steps:
    - uses: actions/checkout@v2
    - name: zip deploy script
      run: |
        mkdir deploy_script
        cp deploy.sh deploy_script
        tar -cvf deploy.tar deploy_script

    - name: copy deploy file via ssh
      uses: appleboy/scp-action@master
      env:
        HOST: ${{ secrets.HOST }}
        USERNAME: ${{ secrets.USERNAME }}
        PORT: ${{ secrets.PORT }}
        KEY: ${{ secrets.KEY }}
      with:
        source: "deploy_script"
        target: "."
    
    - name: ssh into droplet
      uses: appleboy/ssh-action@master
      env:
        BRANCH: ${{ secrets.BRANCH_OTHER }}
        CELERY_BROKER_URL: ${{ secrets.CELERY_BROKER_URL }}
        DEFAULT_FROM_EMAIL: ${{ secrets.DEFAULT_FROM_EMAIL }}
        EMAIL_BACKEND: ${{ secrets.EMAIL_BACKEND }}
        EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
        EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
        EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        ELASTIC_PASSWORD: ${{ secrets.ELASTIC_PASSWORD }}
        ELASTIC_SEARCH_URL: ${{ secrets.ELASTIC_SEARCH_URL }}
        ELASTIC_USERNAME: ${{ secrets.ELASTIC_USERNAME }}
        HS_API_KEY: ${{ secrets.HS_API_KEY }}
        HS_TICKET_PIPELINE: ${{ secrets.HS_TICKET_PIPELINE }}
        HS_TICKET_PIPELINE_STAGE: ${{ secrets.HS_TICKET_PIPELINE_STAGE }}
        RABBITMQ_PASSWORD: ${{ secrets.RABBITMQ_PASSWORD }}
        ENVIRONMENT: ${{ secrets.ENVIRONMENT }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }} 
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.KEY }}
        port: ${{ secrets.PORT }}
        envs: BRANCH, CELERY_BROKER_URL, DEFAULT_FROM_EMAIL, EMAIL_BACKEND, EMAIL_HOST, EMAIL_HOST_USER, EMAIL_HOST_PASSWORD, DATABASE_URL, ELASTIC_PASSWORD, ELASTIC_SEARCH_URL, ELASTIC_USERNAME, HS_API_KEY, HS_TICKET_PIPELINE, HS_TICKET_PIPELINE_STAGE, RABBITMQ_PASSWORD, ENVIRONMENT, 
        script: |
          export BRANCH=$BRANCH
          export RABBITMQ_PASSWORD=$RABBITMQ_PASSWORD
          cp -r deploy_script/deploy.sh .
          chmod +x deploy.sh && ./deploy.sh run
